<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Medical Chatbot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #181818;
      margin: 0;
      padding: 0;
      color: #f0f0f0;
    }

    .chatbot-icon {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 60px;
      height: 60px;
      background: #007bff;
      color: #fff;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      cursor: pointer;
      font-size: 30px;
      z-index: 1000;
      transition: transform 0.3s ease;
    }

    .chatbot-icon:hover {
      transform: scale(1.1);
    }

    .chat-container {
      position: fixed;
      bottom: 80px;
      right: 20px;
      max-width: 350px;
      background: #2e2e2e;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
      display: none;
      flex-direction: column;
      z-index: 999;
      overflow: hidden;
    }

    .chat-header {
      background: #333;
      color: #fff;
      padding: 15px;
      border-radius: 10px 10px 0 0;
      text-align: center;
      position: relative;
      font-size: 18px;
    }

    .chat-header .close-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background: none;
      border: none;
      color: #fff;
      font-size: 18px;
      cursor: pointer;
    }

    .chat-messages {
      padding: 15px;
      max-height: 300px;
      overflow-y: auto;
      border-top: 1px solid #444;
      background: #1e1e1e;
    }

    .message {
      margin: 10px 0;
      padding: 10px;
      border-radius: 10px;
      background-color: #444;
      max-width: 80%;
    }

    .user-message {
      background-color: #007bff;
      color: white;
      text-align: right;
      margin-left: auto;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .bot-message {
      background-color: #555;
      color: white;
    }

    .chat-input {
      display: flex;
      padding: 15px;
      background: #333;
      border-top: 1px solid #444;
    }

    #userInput {
      flex: 1;
      padding: 10px;
      border: 1px solid #444;
      border-radius: 5px;
      background: #2e2e2e;
      color: #f0f0f0;
    }

    #sendBtn {
      background: #007bff;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
      margin-left: 10px;
      transition: background-color 0.3s;
    }

    #sendBtn:hover {
      background-color: #0056b3;
    }

    .message span {
      display: block;
      margin-top: 5px;
      font-size: 14px;
      color: #bbb;
    }
  </style>
</head>
<body>
  <div class="chatbot-icon" id="chatbotIcon">ðŸ’¬</div>
  <div class="chat-container" id="chatContainer">
    <div class="chat-header">
      Medical Chatbot
      <button class="close-btn" id="closeChat">Ã—</button>
    </div>
    <div id="chatMessages" class="chat-messages"></div>
    <div class="chat-input">
      <input id="userInput" type="text" placeholder="Describe your symptoms..." />
      <button id="sendBtn">Send</button>
    </div>
  </div>

  <script>
    const medicalData = [
      // Your medicalData array remains the same as before
    ];

    let userSymptoms = [];  
    let isFirstInteraction = true;

    function diagnose(symptoms) {
      const inputWords = symptoms.toLowerCase().split(/\s+/);
      const matchedConditions = medicalData.map(data => {
        const matchedSymptoms = inputWords.filter(word => data.symptom.toLowerCase().includes(word)).length;
        return { disease: data.disease, recommendation: data.recommendation, matchedSymptoms };
      });

      const bestMatch = matchedConditions.sort((a, b) => b.matchedSymptoms - a.matchedSymptoms)[0];

      if (bestMatch.matchedSymptoms > 0) {
        return `Based on the symptoms provided, you may have: ${bestMatch.disease}<br>Recommendation: ${bestMatch.recommendation}<br><br><strong>For better understanding, we suggest consulting a doctor.</strong>`;
      } else {
        return "Sorry, I couldn't identify the disease with the symptoms provided. Please consult a doctor for a more accurate diagnosis.";
      }
    }

    const chatContainer = document.getElementById("chatContainer");
    const chatbotIcon = document.getElementById("chatbotIcon");
    const closeChat = document.getElementById("closeChat");
    const chatMessages = document.getElementById("chatMessages");
    const userInput = document.getElementById("userInput");
    const sendBtn = document.getElementById("sendBtn");

    chatbotIcon.addEventListener("click", () => {
      chatContainer.style.display = "flex";
      if (isFirstInteraction) {
        addMessage("Hello! What's your name?", false);
        isFirstInteraction = false;
      }
    });

    closeChat.addEventListener("click", () => {
      chatContainer.style.display = "none";
    });

    function addMessage(message, isUser = true) {
      const messageDiv = document.createElement("div");
      messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
      messageDiv.innerHTML = message;
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    sendBtn.addEventListener("click", () => {
      const inputText = userInput.value.trim();
      if (inputText) {
        if (userSymptoms.length < 3) {
          userSymptoms.push(inputText);
          addMessage(inputText, true);

          if (userSymptoms.length < 3) {
            addMessage("Please provide another symptom.", false);
          }
        }
        
        if (userSymptoms.length === 3) {
          const diagnosisMessage = diagnose(userSymptoms.join(" "));
          addMessage(diagnosisMessage, false);
          userSymptoms = [];  // Reset symptoms for the next interaction
          addMessage("Please provide new symptoms if you'd like another diagnosis.", false);
        }
      }
      userInput.value = '';
    });
  </script>
</body>
</html>
